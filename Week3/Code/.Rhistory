head(dd)
str(res)
write.csv(res, file = '/home/bop16jpp/Dropbox/Toni-Joe/paiwise_PAML/results/spearmans_rank_results.csv')
dat <- read.csv('/home/bop16jpp/Dropbox/Toni-Joe/paiwise_PAML/results/only_significant_ADAPTED.csv')
library(knitr)
kable(dat, caption = 'Spearmans Rank correlation of differnces between morphological rates of evolution and genetic rates of evolution ')
res[res$pval < 0.1,]
rm(list=ls())
library(stringr)
dd <- read.csv("/home/bop16jpp/Dropbox/Toni-Joe/paiwise_PAML/analysis_files_scaled/evolratediff_omegadiff.csv", stringsAsFactors = F)
combos <- unique(dd[,c("gene","pc")])
res <- c()
for (i in 1:nrow(combos)) {
fgene <- combos$gene[i]
fpc <- combos$pc[i]
focal.data <- dd[dd$gene == fgene & dd$pc == fpc,]
focal.data <- focal.data[focal.data$omega_difference < 10,]
mod <- suppressWarnings(cor.test(focal.data$omega_difference, focal.data$evolrate_difference, method="spearman"))
pdf(paste0("/home/bop16jpp/Dropbox/Toni-Joe/paiwise_PAML/analysis_files_scaled/scaled_results/plots/", fgene, "_", fpc, ".pdf"), height=4, width=4)
par(mar=c(4.5,4.5,2,2))
plot(focal.data$evolrate_difference ~ focal.data$omega_difference, pch=16, ylab="Difference in beak shape rate", xlab="Difference in dN/dS")
legend("topright", bty = "n", legend = paste0("Rho = ", round(mod$estimate,2), ";", " P = ", round(mod$p.value,2)), cex=0.7)
dev.off()
res <- rbind(res, c(fgene, fpc, mod$estimate, mod$p.value))
}
res <- data.frame(res, stringsAsFactors = F)
colnames(res) <- c("gene", "pc", "rho", "pval")
res$rho <- as.numeric(res$rho)
res$pval <- as.numeric(res$pval)
res[res$pval < 0.05,]
write.csv(only_significant, file = '/home/bop16jpp/Dropbox/Toni-Joe/paiwise_PAML/analysis_files_scaled/scaled_results/only_significant.csv')
only_significant <- res[res$pval < 0.05,]
write.csv(only_significant, file = '/home/bop16jpp/Dropbox/Toni-Joe/paiwise_PAML/analysis_files_scaled/scaled_results/only_significant.csv')
dat <-  read.csv('/home/bop16jpp/Dropbox/Toni-Joe/paiwise_PAML/analysis_files_scaled/scaled_results/only_significant_ADAPTED.csv')
library(knitr)
kable(dat, caption = 'Spearmans Rank correlation of differnces between morphological rates of evolution and genetic rates of evolution ')
dat <-  read.csv('/home/bop16jpp/Dropbox/Toni-Joe/paiwise_PAML/analysis_files_scaled/scaled_results/only_significant_ADAPTED.csv')
library(knitr)
kable(dat, caption = 'Spearmans Rank correlation of differnces between morphological rates of evolution and genetic rates of evolution ')
View(dd)
dat <- read.csv('/home/bop16jpp/Dropbox/Toni-Joe/paiwise_PAML/results/only_significant_ADAPTED.csv')
library(knitr)
kable(dat, caption = 'Spearmans Rank correlation of differnces between morphological rates of evolution and genetic rates of evolution ')
dat <-  read.csv('/home/bop16jpp/Dropbox/Toni-Joe/paiwise_PAML/analysis_files_scaled/scaled_results/only_significant_ADAPTED.csv')
library(knitr)
kable(dat, caption = 'Spearmans Rank correlation of differnces between morphological rates of evolution and genetic rates of evolution ')
dat <-  read.csv('/home/bop16jpp/Dropbox/Toni-Joe/paiwise_PAML/analysis_files_scaled/scaled_results/only_significant_ADAPTED.csv')
dat <- data.frame(dat)
library(knitr)
kable(dat, caption = 'Spearmans Rank correlation of differnces between morphological rates of evolution and genetic rates of evolution ')
View(dat)
dat <-  read.csv('/home/bop16jpp/Dropbox/Toni-Joe/paiwise_PAML/analysis_files_scaled/scaled_results/only_significant_ADAPTED.csv')
dat <- data.frame(dat)
library(knitr)
kable(dat, caption = 'Spearmans Rank correlation of differnces between morphological rates of evolution and genetic rates of evolution ')
rm(list=ls())
library(stringr)
dd <- read.csv("/home/bop16jpp/Dropbox/Toni-Joe/paiwise_PAML/analysis_files_scaled/evolratediff_omegadiff.csv", stringsAsFactors = F)
combos <- unique(dd[,c("gene","pc")])
res <- c()
for (i in 1:nrow(combos)) {
fgene <- combos$gene[i]
fpc <- combos$pc[i]
focal.data <- dd[dd$gene == fgene & dd$pc == fpc,]
focal.data <- focal.data[focal.data$omega_difference < 10,]
mod <- suppressWarnings(cor.test(focal.data$omega_difference, focal.data$evolrate_difference, method="spearman"))
pdf(paste0("/home/bop16jpp/Dropbox/Toni-Joe/paiwise_PAML/analysis_files_scaled/scaled_results/plots/", fgene, "_", fpc, ".pdf"), height=4, width=4)
par(mar=c(4.5,4.5,2,2))
plot(focal.data$evolrate_difference ~ focal.data$omega_difference, pch=16, ylab="Difference in beak shape rate", xlab="Difference in dN/dS")
legend("topright", bty = "n", legend = paste0("Rho = ", round(mod$estimate,2), ";", " P = ", round(mod$p.value,2)), cex=0.7)
dev.off()
res <- rbind(res, c(fgene, fpc, mod$estimate, mod$p.value))
}
res <- data.frame(res, stringsAsFactors = F)
colnames(res) <- c("gene", "pc", "rho", "pval")
res$rho <- as.numeric(res$rho)
res$pval <- as.numeric(res$pval)
res[res$pval < 0.05,]
res[res$pval < 0.1,]
res$pval.bon <- p.adjust(res$pval, method = "bonferroni")
res$pval.holm <- p.adjust(res$pval, method = "holm")
res$pval.hoch <- p.adjust(res$pval, method = "hochberg")
only_significant <- res[res$pval.bon < 0.05,]
write.csv(only_significant, file = '/home/bop16jpp/Dropbox/Toni-Joe/paiwise_PAML/analysis_files_scaled/scaled_results/only_significant.csv')
res[res$pval.bon < 0.1,]
res[res$pval.holm < 0.05,]
res[res$pval.holm < 0.1,]
res[res$pval.hoch < 0.05,]
res[res$pval.hoch < 0.1,]
p.adjust(res$pval[res$gene=="ALX1"], method="bonferroni")
head(res)
head(dd)
str(res)
write.csv(res, file = '/home/bop16jpp/Dropbox/Toni-Joe/paiwise_PAML/analysis_files_scaled/scaled_results/spearmans_rank_results.csv')
rm(list=ls())
library(stringr)
dd <- read.csv("/home/bop16jpp/Dropbox/Toni-Joe/paiwise_PAML/analysis_files_scaled/evolratediff_omegadiff.csv", stringsAsFactors = F)
combos <- unique(dd[,c("gene","pc")])
res <- c()
for (i in 1:nrow(combos)) {
fgene <- combos$gene[i]
fpc <- combos$pc[i]
focal.data <- dd[dd$gene == fgene & dd$pc == fpc,]
focal.data <- focal.data[focal.data$omega_difference < 10,]
mod <- suppressWarnings(cor.test(focal.data$omega_difference, focal.data$evolrate_difference, method="spearman"))
pdf(paste0("/home/bop16jpp/Dropbox/Toni-Joe/paiwise_PAML/analysis_files_scaled/scaled_results/plots/", fgene, "_", fpc, ".pdf"), height=4, width=4)
par(mar=c(4.5,4.5,2,2))
plot(focal.data$evolrate_difference ~ focal.data$omega_difference, pch=16, ylab="Difference in beak shape rate", xlab="Difference in dN/dS")
legend("topright", bty = "n", legend = paste0("Rho = ", round(mod$estimate,2), ";", " P = ", round(mod$p.value,2)), cex=0.7)
dev.off()
res <- rbind(res, c(fgene, fpc, mod$estimate, mod$p.value))
}
res <- data.frame(res, stringsAsFactors = F)
colnames(res) <- c("gene", "pc", "rho", "pval")
res$rho <- as.numeric(res$rho)
res$pval <- as.numeric(res$pval)
only_significant <- res[res$pval < 0.05,]
write.csv(only_significant, file = '/home/bop16jpp/Dropbox/Toni-Joe/paiwise_PAML/analysis_files_scaled/scaled_results/only_significant.csv')
res[res$pval < 0.1,]
res$pval.bon <- p.adjust(res$pval, method = "bonferroni")
res$pval.holm <- p.adjust(res$pval, method = "holm")
res$pval.hoch <- p.adjust(res$pval, method = "hochberg")
res[res$pval.bon < 0.05,]
res[res$pval.bon < 0.1,]
res[res$pval.holm < 0.05,]
res[res$pval.holm < 0.1,]
res[res$pval.hoch < 0.05,]
res[res$pval.hoch < 0.1,]
p.adjust(res$pval[res$gene=="ALX1"], method="bonferroni")
head(res)
head(dd)
str(res)
write.csv(res, file = '/home/bop16jpp/Dropbox/Toni-Joe/paiwise_PAML/analysis_files_scaled/scaled_results/spearmans_rank_results.csv')
print(res)
print(res)
res[res$pval.hoch < 0.1,]
dat <-  read.csv('/home/bop16jpp/Dropbox/Toni-Joe/paiwise_PAML/analysis_files_scaled/scaled_results/only_significant_ADAPTED.csv')
dat <- data.frame(dat)
library(knitr)
kable(dat, caption = 'Spearmans Rank correlation of differnces between morphological rates of evolution and genetic rates of evolution ')
<img src="/home/bop16jpp/Dropbox/Toni-Joe/paiwise_PAML/analysis_files_scaled/scaled_results/plots/ALX1_ PC2.pdf" alt="some text"  width="4200" height="4200">
img(src="/home/bop16jpp/Dropbox/Toni-Joe/paiwise_PAML/analysis_files_scaled/scaled_results/plots/ALX1_ PC2.pdf", alt="some text",  width="4200", height="4200")
<img(src="/home/bop16jpp/Dropbox/Toni-Joe/paiwise_PAML/analysis_files_scaled/scaled_results/plots/ALX1_ PC2.pdf", alt="some text",  width="4200", height="4200")>
knitr::opts_chunk$set(echo = TRUE)
dat <- read.csv('/home/bop16jpp/Documents/MRES_writeup/in progress/data/Full_table_of_genes.csv')
dat$X <-NULL
library(xtable)
options(xtable.floating = FALSE)
options(xtable.timestamp = "")
options(xtable.comment = F)
Table_str <- xtable(dat, include.row.names = F, caption = "Genetic data statistics for each candidate gene for chicken as the reference.")
print (Table_str, include.rownames = F, latex.environments = "center", floating = TRUE, caption.placement = "top")
dat <- read.csv('/home/bop16jpp/Documents/MRES_writeup/in progress/data/Full_table_of_genes.csv')
dat$X <-NULL
library(xtable)
options(xtable.floating = FALSE)
options(xtable.timestamp = "")
options(xtable.comment = F)
Table_str <- xtable(dat, include.row.names = F, caption = "Genetic data statistics for each candidate gene for chicken as the reference.")
print (Table_str, include.rownames = F, latex.environments = "center", floating = TRUE, caption.placement = "top")
landscape()
dat <- read.csv('/home/bop16jpp/Documents/MRES_writeup/in progress/data/Full_table_of_genes.csv')
dat$X <-NULL
library(xtable)
options(xtable.floating = FALSE)
options(xtable.timestamp = "")
options(xtable.comment = F)
\begin(landscape)
dat <- read.csv('/home/bop16jpp/Documents/MRES_writeup/in progress/data/Full_table_of_genes.csv')
dat$X <-NULL
library(xtable)
options(xtable.floating = FALSE)
options(xtable.timestamp = "")
options(xtable.comment = F)
Table_str <- xtable(dat, include.row.names = F, caption = "Genetic data statistics for each candidate gene for chicken as the reference.")
print (Table_str, include.rownames = F, latex.environments = "center", floating = TRUE, caption.placement = "top", floating.environment = 'landscape')
dat <- read.csv('/home/bop16jpp/Documents/MRES_writeup/in progress/data/Full_table_of_genes.csv')
dat$X <-NULL
library(xtable)
options(xtable.floating = FALSE)
options(xtable.timestamp = "")
options(xtable.comment = F)
Table_str <- xtable(dat, include.row.names = F, caption = "Genetic data statistics for each candidate gene for chicken as the reference.")
print (Table_str, type = 'latex', include.rownames = F, latex.environments = "center", floating = TRUE, caption.placement = "top", floating.environment = 'sidewaystable')
dat <- read.csv('/home/bop16jpp/Documents/MRES_writeup/in progress/data/Full_table_of_genes.csv')
dat$X <-NULL
library(xtable)
options(xtable.floating = FALSE)
options(xtable.timestamp = "")
options(xtable.comment = F)
Table_str <- xtable(dat, include.row.names = F, caption = "Genetic data statistics for each candidate gene for chicken as the reference.")
print (Table_str, type = 'latex', include.rownames = F, latex.environments = "center", floating = TRUE, caption.placement = "top", floating.environment = 'landscape')
dat <- read.csv('/home/bop16jpp/Documents/MRES_writeup/in progress/data/Full_table_of_genes.csv')
dat$X <-NULL
library(xtable)
options(xtable.floating = FALSE)
options(xtable.timestamp = "")
options(xtable.comment = F)
Table_str <- xtable(dat, include.row.names = F, caption = "Genetic data statistics for each candidate gene for chicken as the reference.")
print (Table_str, type = 'latex', include.rownames = F, latex.environments = "center", floating = TRUE, caption.placement = "top")
library("ggplot")
2 + 3
ls
lib.paths
.libpath()
.libpaths()
a <- 4
a # display it
a * a
a_squared <- a * a
sqrt(a_squared)
v <- c(1, 2, 3, 4) # Build a vector
v
is.vector(V)
is.vector(v)
mean(v)
var(v)
is.vector(v) # is it a vector?
mean(v) # mean
var(v) # variance
median(v) # medial
sum(v) # sum all the elements
prodv(v + 1) # multiply
prod(v + 1) # multiply
length(v)
version
wing.width.cm <- 1.2 # using dot notation
wing.length.cm <- c(4.7, 5.2, 4.8)
r wing.length.cm
wing.length.cm
r x <- (1 + (2 * 3)
x <- (1 + (2 * 3)
x <- (1 + (2 * 3))
x <- (1 + (2 * 3))
2 + (2*3))
2 + (2*3)
class(v)
v <- TRUE
class(v)
class(v)
v <- 3.2
class(v)
v < 2L
class(v)
v < 2L
v <- 2L
class(v)
v <- "A string"
class(v)
is.na(b)
b <- NA
is.na(b)
b <- 0/0
b
is.nan(b)
is.nan(b)b <- 5/0
b <- 5/0
b
is.nan(b)
is.infinite(b)
is.finite(0/0)
as.integer(3.1)
as.numeric(4)
as.roman(155)
as.character(155)
as.logical(5)
as.logical(0)
1E4
1e4
5e-2
1e4^2
1 / 3 / 1e8
## Run a simulation that involves sampling from a population
x <- rnorm(50) # generate your population
x
doit <- function(x){
x <- sample(x, replace = TRUE)
if(length(unique(x)) > 30) { # only take mean in sample was sufficient
print(paste("Mean of this sample was: ", as.character(mean(x))))
}
}
result <-lapply(1:100, function(i) doit(x))
result <- vector("list", 100) # Initializa
for(i in 1:100){
result[[i]] <- doit(x)
}
is.vector(v) # is it a vector? (yes)
# Data types and structures (see notes as already covered)
v1 <- c(0.02, 0.5, 1)
v2 <- c("a", "bc", "def", "ghij")
v3 <- c(TRUE, TRUE, FALSE)
v11;v2;v3
v1;v2;v3
mat1 <- matrix(1:25, 5, 5)
mat1 <- matrix(1:25, 5, 5)
mat1
mat1 <- matrix(1:25, 5, 5)
mat1
mat1 <- matrix(1:25, 5, 5, byrow = TRUE)
mat1
dim(mat1) # get the size of the matrix
arr1 <- array(1:50, c(5, 5, 2))
arr1[,,1]
arr1[,,2]
MyData <- read.csv("../Data/trees.csv", header = TRUE)
MyData <- read.csv("../Data/trees.csv", header = TRUE)
MyData <- read.csv("../Data/trees.csv", header = TRUE)
MyData <- read.csv("../Data/trees.csv", header = TRUE)
dir
source('~/CMEE/CMEECourseWork/Week3/Code/basic_io.R')
setwd("~/CMEE/CMEECourseWork/Week3/Code")
MyData <- read.csv("../Data/trees.csv", header = TRUE)
write.csv(MyData, "../Results/MyData.csv")
write.table(MyData[1,], file = "../Results/MyData.csv", append = TRUE)
write.csv(MyData, "../Results/MyData.csv", row.names = TRUE)
write.table(MyData, "../Results/MyData.csv", col.names = FALSE)
TreeHeight <- function(degrees, distance){
radians <- degrees * pi / 180
height <- distance * tan(radians)
print(paste("Tree height is:", height))
return (height)
}
TreeHeight(37, 40)
radians <- degrees * pi / 180
TreeHeight <- function(degrees, distance){
radians <- degrees * pi / 180
height <- distance * tan(radians)
print(paste("Tree height is:", height))
return (height)
}
a <- TRUE
if (a == TRUE){
print("A is TRUE")
} else {
print("A is False")
}
z <- runif(1) # random number
if (z <= 0.5) {
print ("Less than a quarter")
}
## for loop using a vector
v1 <- c("a","bc","def")
for (i in v1){
print(i)
}
a <- TRUE
if (a == TRUE){
print("A is TRUE")
} else {
print("A is False")
}
z <- runif(1) # random number
if (z <= 0.5) {
print ("Less than a quarter")
}
## For loop using a sequence
for (i in 1:100){
j <- i * i
print(paste(i, " squared is", j ))
}
## For loop over vector of strings
for(species in c('Heliodoxa rubinoides',
'Boissonneaua jardini',
'Sula nebouxii'))
{
print(paste('The species is', species))
}
# for loop using a vector
v1 <- c("a","bc","def")
for (i in v1){
print(i)
}
# While loop
i <- 0
while (i<100){
i <- i+1
print(i^2)
}
# Breaking out of loops - opten you want to break out of a loop when a condition is met.
i <- 0 # Initialize I
while(i<Inf){
if(i==20){
break
} else {
cat("i equals ", i, "\n")
i <- i + 1
}
}
for (i in 1:10){
if((i %% 2) == 0)
next
print(i)
}
for (i in 1:10){
if((i %% 2) == 0){
next
}
print(i)
}
# Read in trees.csv
trees_path = "../Data/trees.csv"
trees <- read.csv(trees_path, headers = TRUE)
trees <- read.csv(trees_path, header = TRUE)
head(trees)
type(trees)
class(trees)
trees$Tree.Height.m <- TreeHeight(trees$Distance.m)
trees_path = "../Data/trees.csv"
trees <- read.csv(trees_path, header = TRUE)
trees$Tree.Height.m <- TreeHeight(trees$Angle.degrees, trees$Distance.m)
head(trees)
TreeHeight(41.2826361937914, 31.6658337740228)
# testing loops
for (i in trees){
print(i)
}
for (i in trees){
print(i)
break
}
for (i in trees.row){
print(i)
break
}
dim(trees)
print(trees$Distance.m)
class(print(trees$Distance.m))
commandArgs()
help commandArgs()
help(commandArgs)
commandArgs()
commandArgs()[0]
commandArgs()[1]
commandArgs()[-1]
commandArgs()[2]
fname = commandArgs()[2]
strsplit(example, "/")
example = "../Data/trees.csv"
strsplit(example, "/")
strsplit(example, "/")[-1]
strsplit(example, "/")[[-1]]
strsplit(example, "/")
strsplit(example, "/")
strsplit(example, "/")[[1]]
strsplit(example, "/")[[1]]
strsplit(example, "/")[[2]]
strsplit(example, "/")[[1][0]]
strsplit(example, "/")[[1]][1]
strsplit(example, "/")[[1]][-1]
strsplit(example, "/")[[1]][2]
strsplit(example, "/")[[1]][3]
unlist(strsplit(example, "/"))[-1]
unlist(strsplit(example, "/"))[[-1]]
unlist(strsplit(example, "/"))[-1]
unlist(strsplit(example, "/"))[-1][-1]
strsplit(example, "/"))-1][-1]
strsplit(example, "/")[-1][-1]
strsplit(example, "/")[-1]
strsplit(example, "/")[1]
strsplit(example, "/")[1][-1]
strsplit(example, "/")[1][-1]
unlist(strsplit(example, "/"))[-1][-1]
fname = unlist(strsplit(example, "/"))[-1][-1]
strsplit(fname)[1]
strsplit(fname, ".")[1]
fname = unlist(strsplit(example, "/"))[-1][-1]
fname
strsplit(fname, ".")[0]
strsplit(fname, ".")
fname
gsub(".csv", "", fname)
print(paste(rname, "_treeheights.csv", sep=""))
rname = gsub(".csv", "", fname)
print(paste(rname, "_treeheights.csv", sep=""))
print(paste("../Reasults/", rname, "_treeheights.csv", sep=""))
exit()
q()
print(commandArgs(trailingOnly = TRUE))
inpath = commandArgs(trailingOnly = TRUE)
print(length(inpath))
# Header.
########################################################################
#                               Functions
########################################################################
# define function TreeHeight.R
# This function calculates heights of trees given distance of each tree
# from its base and angle to its top, using  the trigonometric formula
# height = distance * tan(radians)
# ARGUMENTS
# degrees:   The angle of elevation of tree
# distance:  The distance from base of tree (e.g., meters)
# OUTPUT
# The heights of the tree, same units as "distance"
TreeHeight <- function(degrees, distance){
radians <- degrees * pi / 180
height <- distance * tan(radians)
print(paste("Tree height is:", height))
return (height)
}
# Test TreeHeight
TreeHeight(37, 40)
###########################################################################
#                             Script
###########################################################################
# Read in trees.csv
trees_path = "../Data/trees.csv"
trees <- read.csv(trees_path, header = TRUE)
# make a new column in trees with the value of the output of the TreeHeight function.
trees$Tree.Height.m <- TreeHeight(trees$Angle.degrees, trees$Distance.m)
print(head(trees))
TreeHeight(41.2826361937914, 31.6658337740228)
TreeHeight(37, 40)
